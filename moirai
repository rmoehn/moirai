#!/usr/bin/perl

use 5.010;
use warnings;
use strict;
use autodie qw(:all);

use Readonly;
use YAML::Tiny;
use Data::Dumper;
use Time::Piece;
use Time::Seconds;

Readonly my $TTL_DB_FILE => $ENV{HOME} . '/.moirai';

# Get the current time
my $CUR_TIME = localtime;

# Set the equivalents of the time units in seconds
Readonly my %SECONDS_FOR => (
    d => ONE_DAY,
    w => ONE_WEEK,
    m => ONE_MONTH,
    y => ONE_YEAR,
);

# Set the modes in which this program can be used
Readonly my $DEFAULT_KEY => 'default';
Readonly my %SUB_FOR => (
    lachesis => \&set_ttl,
    atropos  => \&delete_expired,
    $DEFAULT_KEY  => \&print_help,
);

# Open the TTL database
my $ttl_db = -e $TTL_DB_FILE ? YAML::Tiny->read($TTL_DB_FILE)
                             : YAML::Tiny->new();
if (!defined $ttl_db) {
    die "Cannot read from $TTL_DB_FILE: ", $ttl_db->errstr();
}

# Act according to the user's request
my $command = shift @ARGV || $DEFAULT_KEY;
if (!exists $SUB_FOR{$command}) {
    $command = $DEFAULT_KEY;
}
$SUB_FOR{$command}->($ttl_db, @ARGV);

# Write modifications to the database
$ttl_db->write($TTL_DB_FILE)
    or die "Cannot write to $TTL_DB_FILE: ", $ttl_db->errstr();

# Update the expiry time for a given file or glob
sub set_ttl {
    my $ttl_db = shift;
    my $glob   = shift;
    my $ttl    = shift;

    # Check for relative paths
    if ($glob !~ m{\A ~}xms and $glob !~ m{\A /}xms) {
        die "No relative paths allowed: $glob.\n";
    }

    $ttl_db->[0]->{$glob} = $ttl;
}

# Delete all files that have expired
sub delete_expired {
    my $ttl_db = shift;

    # Go through all files in all globs in the database
    GLOB:
    while (my ($glob, $ttl_str) =  each %{ $ttl_db->[0] }) {
        my @files = glob $glob;
        my $deleted_cnt = 0;
        FILE:
        for my $file (@files) {
            # Skip the file if it doesn't exist
            if (! -e $file) {
                warn "There is no file named $file.\n";
                next FILE;
            }

            # Determine the file's mtime
            my $expiry_time = Time::Piece->new( (stat $file)[9] );

            # Determine the file's time of expiry
            if ($ttl_str =~ m/(\d+)(\w)/xms) {
                my $time_val  = $1;
                my $time_unit = $2;

                # Make sure the given unit of time is acceptable
                if (! exists($SECONDS_FOR{$time_unit})) {
                    warn "Unknown time unit: $time_unit\n";
                    next GLOB;
                }

                $expiry_time += $time_val * $SECONDS_FOR{$time_unit};
            }
            else {
                warn "Invalid TTL format: $ttl_str\n";
                next GLOB;
            }

            # Delete the file if it has expired
            if ($expiry_time < $CUR_TIME) {
                unlink $file;
                ++$deleted_cnt;
                warn "Deleted $file.\n";
            }
        }

        # Remove the entry from the database if there are no more files to it
        if ($deleted_cnt == scalar(@files)) {
            delete $ttl_db->[0]->{$glob};
        }
    }
}

# Emit a helpful message
sub print_help {
    say 'Usage:';
    say '    moirai lachesis <filename>|"<glob>" <time to live>';
    say '    moirai atropos';

    exit 1;
}
